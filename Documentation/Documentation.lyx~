#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{helvet}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{forest}
\renewcommand{\familydefault}{\sfdefault}
\renewcommand{\baselinestretch}{1.5} 
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=blue,
    bookmarks=true,
}


\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2,
    otherkeywords={mkdir,cmake,make,git,sudo,bladeRF-cli,ad9361}
}

\lstset{style=mystyle}
\definecolor{folderbg}{RGB}{124,166,198}
\definecolor{folderborder}{RGB}{110,144,169}

\def\Size{4pt}
\tikzset{
  folder/.pic={
    \filldraw[draw=folderborder,top color=folderbg!50,bottom color=folderbg]
      (-1.05*\Size,0.2\Size+5pt) rectangle ++(.75*\Size,-0.2\Size-5pt);  
    \filldraw[draw=folderborder,top color=folderbg!50,bottom color=folderbg]
      (-1.15*\Size,-\Size) rectangle (1.15*\Size,\Size);
  }
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 1.5cm
\secnumdepth -2
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
Tolteca Project Documentation
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename cinvestav logo.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size large
Centro de Investigación y de Estudios Avanzados 
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
del Instituto Politécnico Nacional 
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
Unidad Unidad Guadalajara 
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
Author: Emilio Tonix
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
Tech Lead: Dr.
 Fernando Peña Campos
\end_layout

\begin_layout Standard
\align center

\series bold
\size large
Manager: Dr.
 Ramón Parra Michel 
\series default
\size default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
\noindent
Introduction
\end_layout

\begin_layout Standard
This document provides information about feature development of ad9361.
 Starting from NuandRF project to a custom product.
 The idea is to provide firmware and integration tools for deployment in
 the transreciever aplications.
 We provide a code package made of 3 main modules.
 Host 
\series bold
BladeRF, FPGA_FW 
\series default
and 
\series bold
GUI
\series default
.
 Note: For bladeRF, you may need legacy APP first in order to use custom
 project.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
Nuand Legacy App, BladeRF2
\end_layout

\begin_layout Standard
\paragraph_spacing single

\shape italic
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/Nuand/bladeRF"

\end_inset


\shape default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
Our custom Project
\end_layout

\begin_layout Standard
\paragraph_spacing single
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/Tonix22/NuandRFProyect"

\end_inset


\end_layout

\begin_layout Section
Nuand / bladeRF 
\end_layout

\begin_layout Standard
\align block
It is a C/C++ legacy package taken from Nuand bladeRF V.2, it is an open
 source platform based on easy to use software.
 It provide access to ad9361 radio Frequency Transcreciver directly from
 CPU applications, this chip offers frequency range from 47 MHz to 6 GHz,
 and 61.44 MHz sampling rate.
 Through libbladeRF the bladeRF 2.0 micro is compatible with GNURadio, GQRX,
 SDR-Radio, SoapySDR, and more on Windows, Linux and macOS.
 In general we could say bladeRF is non custom software and hardware to
 access ad9361, but give you such potential of the device, in a project
 easy work.
\end_layout

\begin_layout Subsection
Hands on client
\end_layout

\begin_layout Standard
The client is known as the console aplication to access and modify registers
 of Nuand, through the General architecture shown in Figure 1.
 Client is connect by an usb port, and then comunications flow through the
 cypress FX3, CYCLON V and finally to the ad9361.
 You could have both options to work with the Blade RF setup:
\series bold
 Legacy and Custom
\series default
.
 The legacy package comes from 
\begin_inset CommandInset href
LatexCommand href
name "Nuand"
target "https://www.nuand.com/"

\end_inset

 which it is company that design SDR solutions.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ImageGeranlNuand.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
General Architecture of Host BladeRF2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sections brief
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename brief.png
	lyxscale 50
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Brief of the following sections
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
1.
 Nuand Original Aplication
\end_layout

\begin_layout Standard
This one is heavier than custom, but it is more complete.
 And provides you a comple comand line interface to interact with the Nuand.
\end_layout

\begin_layout Standard
\noindent
\align left

\series bold
\shape italic
Repository link: 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/Nuand/bladeRF"

\end_inset


\series default
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent Clone the repository : 
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]   
\end_layout

\begin_layout Plain Layout

	$ git clone https://github.com/Nuand/bladeRF.git 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2.
 Go to host folder
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=bash]   
\end_layout

\begin_layout Plain Layout

	$ cd host
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename hostfolder.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Host folder
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
3.
 Build Code
\end_layout

\begin_layout Standard
Firstly go to the host path, and then run a cmake building.
 NOTE: that you must have 
\series bold
cmake
\series default
 and 
\series bold
libusb
\series default
, installed.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]   
\end_layout

\begin_layout Plain Layout

$ mkdir -p build 
\end_layout

\begin_layout Plain Layout

$ cd build 
\end_layout

\begin_layout Plain Layout

$ cmake [options] ../ 
\end_layout

\begin_layout Plain Layout

$ make
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Install the bladerf framework into the system, this one will help you to
 download the bitstream into to the Nuand.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=bash]
\end_layout

\begin_layout Plain Layout

$ sudo make install
\end_layout

\begin_layout Plain Layout

$ sudo ldconfig
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
4.
 Install
\end_layout

\begin_layout Standard
Test that the bladerfcli has been installed correctly 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=bash]
\end_layout

\begin_layout Plain Layout

$ cd ../
\end_layout

\begin_layout Plain Layout

$ bladeRF-cli --version
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will show your cli version, if it was installed correctly.
 Which actually is the repo git commit or branch.
 
\end_layout

\begin_layout Standard
Fore more info, there is a wiki to show how to use the CLI.
 
\end_layout

\begin_layout Standard
\align center

\series bold
\shape italic
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/Nuand/bladeRF/wiki/bladeRF-CLI-Tips-and-Tricks#receiving-samples"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
5.
 Download Bitstream
\end_layout

\begin_layout Standard
For Custom and Nuand code, the bistream is the same, they share the same
 internal logic.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Go to : 
\begin_inset CommandInset href
LatexCommand href
target "https://www.nuand.com/fpga_images/"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename A4_bitsream.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Download A4 in the given link 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For this proyect download A4 image
\end_layout

\begin_layout Standard
Once downloaded, copy the bitsream path and, run the ./bladeRF-cli command
 as follows.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=bash]
\end_layout

\begin_layout Plain Layout

$ bladeRF-cli -d "libusb: instance=0" -l /path/to/fpga.rbf -i
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is an example of what you can do with nuand client terminal
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename clioutput_p1.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Terminal Example part1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename clioutput_p2.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Terminal Example part2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
6.
 Clone custom Repo
\end_layout

\begin_layout Standard
Inside the repository there is a customised and reduced console aplication.
 Folder destination is: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=bash]
\end_layout

\begin_layout Plain Layout

$ git clone https://github.com/Tonix22/NuandRFProyect.git
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
7.
 Build Custom
\end_layout

\begin_layout Standard
There are the similar steps as building original, except that there is not
 need an instalation, and folder path changes.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]   
\end_layout

\begin_layout Plain Layout

$ cd /NuandRFProyect/Nuand_Blade_Base/host 
\end_layout

\begin_layout Plain Layout

$ mkdir -p build 
\end_layout

\begin_layout Plain Layout

$ cd build 
\end_layout

\begin_layout Plain Layout

$ cmake [options] ../ 
\end_layout

\begin_layout Plain Layout

$ make
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
8.
 Run custom
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$ cd host/build/output
\end_layout

\begin_layout Plain Layout

$./bladerf-cli 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
NOTE:
\begin_inset Quotes eld
\end_inset

./
\begin_inset Quotes erd
\end_inset

 is important to differ with Nuand blade-cli previously installed, this
 one is locally builded.
 
\end_layout

\begin_layout Standard
\noindent
This is a code example to modify, basic parameters for software defined
 radio in a raw API fashion.
 So there will be shown almost all functions with ad9361 prefix
\end_layout

\begin_layout Standard
\noindent
Code main sections are in : 
\end_layout

\begin_layout Standard
\align center

\shape italic
NuandRFProyect/Nuand_Blade_Base/host/utilities/bladeRF-cli/src/main.c
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
1.
 OPEN DEVICE 
\end_layout

\begin_layout Standard
Opens usb port to stablish comunication with fx3 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]   
\end_layout

\begin_layout Plain Layout

bladerf_open(&state->dev, rc.device);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
2.
 RX AND TX Threads init
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]   
\end_layout

\begin_layout Plain Layout

cli_start_tasks(state);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
3.
 Frequency: 70Mhz - 5Ghz
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]   
\end_layout

\begin_layout Plain Layout

bladerf_frequency frequency = FREQ; // 150MHZ
\end_layout

\begin_layout Plain Layout

/* Set up band selection */     
\end_layout

\begin_layout Plain Layout

CHECK_STATUS(board_data->rfic->select_band(state->dev, BLADERF_CHANNEL_TX(0),
 frequency));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ad9361_set_tx_lo_freq(phy, frequency);     
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_lo_freq(phy, FREQ);//950MHZ
\end_layout

\begin_layout Plain Layout

board_data->rfic->set_gain(state->dev, BLADERF_CHANNEL_TX(0),60);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
4.
 Sample Rate 520,834 Khz - 61.440Mhz
\end_layout

\begin_layout Standard
To modify the sample rate, there must be verified the interpolation and
 decimation
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c] 
\end_layout

\begin_layout Plain Layout

bladerf_sample_rate current;
\end_layout

\begin_layout Plain Layout

bladerf_rfic_rxfir  rxfir;
\end_layout

\begin_layout Plain Layout

bladerf_rfic_txfir  txfir;
\end_layout

\begin_layout Plain Layout

bladerf_sample_rate rate = SAMPLE_RATE; // 10Mhz
\end_layout

\begin_layout Plain Layout

/*Range for interpolation required*/
\end_layout

\begin_layout Plain Layout

int max_range = 2083334; //2MHZ     
\end_layout

\begin_layout Plain Layout

int min_range = 520834; // 520KHz     
\end_layout

\begin_layout Plain Layout

bool old_rate, new_rate;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

old_rate = (current >= min_range) && ( current <= max_range);
\end_layout

\begin_layout Plain Layout

new_rate = (rate    >= min_range) && ( rate    <= max_range);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

///* Get current filter status */     
\end_layout

\begin_layout Plain Layout

if(old_rate || new_rate){
\end_layout

\begin_layout Plain Layout

	rxfir = board_data->rxfir;
\end_layout

\begin_layout Plain Layout

	txfir = board_data->txfir;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

if(new_rate) // check if rfic needs configuration     
\end_layout

\begin_layout Plain Layout

{         
\end_layout

\begin_layout Plain Layout

	if (rxfir!= BLADERF_RFIC_RXFIR_DEC4 ||             
\end_layout

\begin_layout Plain Layout

		txfir!=BLADERF_RFIC_TXFIR_INT4){
\end_layout

\begin_layout Plain Layout

		//fpga_common/src/ad936x_params.c:604
\end_layout

\begin_layout Plain Layout

			ad9361_set_rx_fir_config(phy,bladerf2_rfic_rx_fir_config_dec4);
\end_layout

\begin_layout Plain Layout

        ad9361_set_rx_fir_en_dis(phy, 1);//1 = enable
\end_layout

\begin_layout Plain Layout

        ad9361_set_tx_fir_config(phy,bladerf2_rfic_tx_fir_config_int4);
\end_layout

\begin_layout Plain Layout

        ad9361_set_tx_fir_en_dis(phy,1);// 1 = enable
\end_layout

\begin_layout Plain Layout

	}     
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

ad9361_set_tx_sampling_freq(phy, rate);
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_sampling_freq(phy, rate);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
5.
 Bandwidth 200Khz -- 56Mhz
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c] 
\end_layout

\begin_layout Plain Layout

ad9361_set_tx_rf_bandwidth(phy,BANDWIDTH_RX);
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_rf_bandwidth(phy,BANDWIDHT_TX);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
6.
 RX AGC MODE OFF
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c] 
\end_layout

\begin_layout Plain Layout

enum rf_gain_ctrl_mode gc_mode;
\end_layout

\begin_layout Plain Layout

gc_mode = RF_GAIN_MGC; // MANUAL GAIN CONTROL     
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_gain_control_mode(phy, 0, RF_GAIN_MGC);// RX channel 0   
  
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_gain_control_mode(phy, 1, RF_GAIN_MGC); // RX channel 1
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
7.
 RX GAIN VALUES
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c] 
\end_layout

\begin_layout Plain Layout

int val; 
\end_layout

\begin_layout Plain Layout

int gain = 10;
\end_layout

\begin_layout Plain Layout

float offset = -17.0f;// depends on frequency bladerf2_rx_gain_ranges, bladerf2_c
ommon.h
\end_layout

\begin_layout Plain Layout

struct bladerf_range const *range      = NULL;
\end_layout

\begin_layout Plain Layout

gain = gain - offset;
\end_layout

\begin_layout Plain Layout

state->dev->board->get_gain_stage_range(state->dev, 0, "full", &range);
\end_layout

\begin_layout Plain Layout

val = __scale_int(range, gain); 
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_rf_gain(phy, 0, val); 
\end_layout

\begin_layout Plain Layout

ad9361_set_rx_rf_gain(phy, 1, val);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
8.
 Read/Write data
\end_layout

\begin_layout Standard
First you shall setup path to the .csv file, which it will be used to read
 data or write data.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c] 
\end_layout

\begin_layout Plain Layout

//tx state
\end_layout

\begin_layout Plain Layout

rxtx_set_file_path(state->tx,"/home/tx.csv");
\end_layout

\begin_layout Plain Layout

rxtx_set_file_format(state->tx,RXTX_FMT_CSV_SC16Q11);
\end_layout

\begin_layout Plain Layout

// rx state
\end_layout

\begin_layout Plain Layout

rxtx_set_file_path(state->rx, "/home/rx.csv");
\end_layout

\begin_layout Plain Layout

rxtx_set_file_format(state->rx,RXTX_FMT_CSV_SC16Q11);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Secondly, select delay and repeat, repeat = 0, means infinit loop.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]
\end_layout

\begin_layout Plain Layout

struct tx_params *tx_params = state->tx->params;
\end_layout

\begin_layout Plain Layout

tx_params->repeat = 0;//Example: tx_params->repeat_delay = 1000;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Finally setup if you want to start RX or TX.
 NOTE: Select one at each time
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]
\end_layout

\begin_layout Plain Layout

// start tx
\end_layout

\begin_layout Plain Layout

tx_cmd_start(state);
\end_layout

\begin_layout Plain Layout

//start rx
\end_layout

\begin_layout Plain Layout

rx_cmd_start(state);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Sleep the main tread the time you want to sample, and then stop the transmition.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]
\end_layout

\begin_layout Plain Layout

usleep(1000*2000); // sample 2 seconds
\end_layout

\begin_layout Plain Layout

rxtx_cmd_stop(state,state->rx); // stop transmition
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent

\end_layout

\begin_layout Section
FPGA_FW
\end_layout

\begin_layout Standard
\align block
As we seen before Nuand has its own product to comunicate with ad9361 transrecie
ver, however this platform is not complety flexible, and has some limitations,
 some of them are that we need a CPU host to exectue certain orders into
 the radio.
 What we are looking for is a custom project mounted inside a softcore in
 the FPGA.
 Intead of a host relationship, we will use a internal softcore agreement.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The softcore has two internal memories for input and output data respectively,
 this ones are drive by an extneral middleware.Then read data is parsed and
 send to an internal ad9361 driver, which process the query or setter, and
 is sent to the transreciever by SPI.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
Middleware is not seen by user, intead user has a GUI where parameters such
 as frquency, sampling rate and other ones,are changed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename FPGA Firmware.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Block diagram of Custom FPGA FW
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parser
\end_layout

\begin_layout Standard
Analog Devices follow a convetion to name its APIs.
 Which actually becomes useful to sort sets of functions.
\end_layout

\begin_layout Standard
\noindent
The pattern followed by the company is shown as next.
 
\series bold
<device>_<set/get>_<tx/rx>_<action>
\end_layout

\begin_layout Standard
\noindent
As consequence we could use those keys words for naming functions and think
 the as mnemonics.
\end_layout

\begin_layout Standard
\noindent
For example , for ad9361 we could see the following examples: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
ad9361_set_tx_lo_freq
\end_layout

\begin_layout Standard
\align center
ad9361_get_tx_sampling_freq
\end_layout

\begin_layout Standard
\align center
ad9361_set_tx_rf_bandwidth 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Given this sort of combinations and knowing the set of <action>, we could
 draw a Graph that present 
\end_layout

\begin_layout Standard
\noindent
all possible paths to generate a valid API call.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /home/tonix/Documents/CINVESTAV/Proyecto_Tolteca/Documentation/opcode/levels.jpg
	lyxscale 60
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Mnemonics Tree
\end_layout

\end_inset


\end_layout

\end_inset

 For each level of the tree there are N posible nodes which represent the
 possible paths.
 Over the API we assume that we are using ad9361 device so we ommit the
 possibility of another device.
 Given the nodes in each level we fit them in a binary representation, since
 N elements can be represented in binary set of M bits.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="middle" width="1.5cm">
<column alignment="center" valignment="top" width="1.5cm">
<column alignment="center" valignment="top" width="1.5cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6 bit 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2bit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\begin_layout Plain Layout
uint8_t
\end_layout

\begin_layout Plain Layout
uint32_t
\end_layout

\begin_layout Plain Layout
int32_t
\end_layout

\begin_layout Plain Layout
uint64_t
\end_layout

\begin_layout Plain Layout
struct
\end_layout

\begin_layout Plain Layout
RXFIRConfig
\end_layout

\begin_layout Plain Layout
TXFIRConfig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\begin_layout Plain Layout
uint8_t
\end_layout

\begin_layout Plain Layout
uint32_t
\end_layout

\begin_layout Plain Layout
int32_t
\end_layout

\begin_layout Plain Layout
uint64_t
\end_layout

\begin_layout Plain Layout
struct
\end_layout

\begin_layout Plain Layout
RXFIRConfig
\end_layout

\begin_layout Plain Layout
TXFIRConfig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
other
\end_layout

\begin_layout Plain Layout
tx
\end_layout

\begin_layout Plain Layout
rx
\end_layout

\begin_layout Plain Layout
trx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
init 
\end_layout

\begin_layout Plain Layout
do
\end_layout

\begin_layout Plain Layout
set
\end_layout

\begin_layout Plain Layout
get
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Mnemonics tree in a 16 bit
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The APIs set is given by 64 functions, however some names are repeated and
 defer only in the setter or getter.
 Doing analysis in the graph above and in the opcode we can reduce up to
 30 possible ID's calls,.
 For example 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=c]
\end_layout

\begin_layout Plain Layout

int32_t ad9361_set_rx_rf_bandwidth(struct ad9361_rf_phy *phy,uint32_t bandwidth_
hz);
\end_layout

\begin_layout Plain Layout

int32_t ad9361_get_rx_rf_bandwidth(struct ad9361_rf_phy *phy,uint32_t *bandwidth
_hz);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Following the given rules, it was made a CPP code to take all possible functions
 and parse them automatically.
 Then this functions are saved in an independent csv file, where we can
 visualize them and verify data.
 The ad9361 functions list is taken from :
\end_layout

\begin_layout Standard
\align center

\series bold
\begin_inset CommandInset href
LatexCommand href
name "Original Header"
target "https://github.com/Tonix22/NuandRFProyect/blob/f0b29de462f9c153df7193e136942d16fb21878c/Nuand_Blade_Base/fpga_common/include/ad936x.h#L792"

\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\begin_inset CommandInset href
LatexCommand href
name "Ad9361 functions list"
target "https://github.com/Tonix22/NuandRFProyect/blob/master/GUITEST/opcode/functions.txt"

\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\begin_inset CommandInset href
LatexCommand href
name "Parser Generator"
target "https://github.com/Tonix22/NuandRFProyect/blob/master/GUITEST/opcode/classify.cpp"

\end_inset


\end_layout

\begin_layout Subsection
Framework Installation
\end_layout

\begin_layout Subsubsection
General Overview
\end_layout

\begin_layout Standard
Required packages and their goals
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Quartus Prime Programmer Version 20.1.1"
target "https://fpgasoftware.intel.com/?edition=lite"

\end_inset

(linux)
\end_layout

\begin_deeper
\begin_layout Itemize
Download bistream 
\end_layout

\end_deeper
\begin_layout Itemize
RISCV GCC 
\end_layout

\begin_deeper
\begin_layout Itemize
Compiler of softcore 
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "openocd 0.10.0+dev-g1e85cf0-dirty"
target "https://github.com/Tonix22/NuandRFProyect/tree/master/FPGA_FW/openOCD"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Debugger interconnect 
\end_layout

\end_deeper
\begin_layout Subsubsection
Quartus installation
\end_layout

\begin_layout Standard
You must be registered in the web page to 
\begin_inset CommandInset href
LatexCommand href
name "download"
target "https://fpgasoftware.intel.com/?edition=lite"

\end_inset

 software.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename quartusdownloadwebpage.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Quartus download
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Once you download the package, decrompress into a folder, and run the 
\series bold
./setup.sh
\end_layout

\begin_layout Standard
\noindent
There are not requeried other devices different from Cyclone V, and neither
 multisim.
 Just install quartus app to download bitstreams with the usb blaster.
\end_layout

\begin_layout Subsubsection
RISCV GCC
\end_layout

\begin_layout Standard
RISC-V is an open standard instruction set architecture (ISA) based on establish
ed reduced instruction set computer (RISC) principles.
 It is provided under open source licenses that do not require fees to use.
 A number of companies are offering or have announced RISC-V hardware, open-sour
ce operating systems are available and the instruction set is supported
 in several popular software toolchains.
 Internal FPGA firmware is build in this architecture, that means softcore
 works with this open architecture.
 
\end_layout

\begin_layout Standard
\noindent
To install firmware compiler, download and run the following comands.
 
\end_layout

\begin_layout Standard
\noindent
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$ sudo apt-get install wget 
\end_layout

\begin_layout Plain Layout

$ wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-20171231-x86
_64-linux-centos6.tar.gz 
\end_layout

\begin_layout Plain Layout

$ tar -xzvf riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6.tar.gz 
\end_layout

\begin_layout Plain Layout

$ sudo mv riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv64-unk
nown-elf-gcc-20171231-x86_64-linux-centos6 
\end_layout

\begin_layout Plain Layout

$ sudo mv /opt/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6 /opt/riscv
 
\end_layout

\begin_layout Plain Layout

$ echo 'export PATH=/opt/riscv/bin:$PATH' >> ~/.bashrc
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
OpenOCD
\end_layout

\begin_layout Standard
OpenOCD is a tool for softcore debugging.
 
\end_layout

\begin_layout Enumerate
Install dependencies
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$ sudo apt-get install libtool automake libusb-1.0.0-dev texinfo libusb-dev
 libyaml-dev pkg-config
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Build provide the interface to debug the softcore firmware.
 Folder in repository has the required version.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$ cd NuandRFProyect/FPGA_FW/openOCD
\end_layout

\begin_layout Plain Layout

$ ./bootstrap 
\end_layout

\begin_layout Plain Layout

$ ./configure --enable-ftdi --enable-dummy
\end_layout

\begin_layout Plain Layout

$ make 
\end_layout

\begin_layout Plain Layout

$ sudo make install
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Build could fail on earlier versions of ubuntu.
 Higher than 18.04.
\end_layout

\begin_deeper
\begin_layout Enumerate
If build fails intall a gcc version lower than 8.
 
\end_layout

\begin_layout Enumerate
To manage multiple gcc versions go to this 
\begin_inset CommandInset href
LatexCommand href
name "link"
target "https://linuxconfig.org/how-to-switch-between-multiple-gcc-and-g-compiler-versions-on-ubuntu-20-04-lts-focal-fossa"

\end_inset


\end_layout

\begin_layout Enumerate
Open makefile and search -Werror flag and delete it.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Vscode Extensions
\end_layout

\begin_layout Enumerate
You may have installed Visual Studio Code for this step, and also it could
 be optional to run the code.
 If you don't use Vscode you could use other IDE or simply use gdb.
 How to use the gdb is not described in this document.
 
\end_layout

\begin_layout Enumerate
Open the extensions section in vscode, and search in market place 
\begin_inset Quotes eld
\end_inset

Native Debug
\begin_inset Quotes erd
\end_inset

 .
 This will provide your gdb connection.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename nativedebug.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Native debug
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Hands on using FPGA firmware
\end_layout

\begin_layout Subsubsection
Clone the repo
\end_layout

\begin_layout Standard
\paragraph_spacing single
Our custom Project
\end_layout

\begin_layout Standard
\noindent
Check that you have already installed the repository.
 It is the same used on host section.
 
\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
\align left
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/Tonix22/NuandRFProyect"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$cd NuandRFProyect/FPGA_FW
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
framework.sh
\end_layout

\begin_layout Standard
There was written an script in order to deal with multiple comands and setup.
 Read the file first and check that the variable paths are setup correctly.
 If not so, then search for the current file paths and update the script.
 
\end_layout

\begin_layout Subsubsection
\noindent
Download bitstream
\end_layout

\begin_layout Standard
First ensure that board is power by an exteneral source of 5V, and JTAG
 port is connected correctly.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$./framework.sh -bitstream
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Known Issues, USB blaster, Linux
\end_layout

\begin_layout Standard
Permisions problems on JTAG port https://rocketboards.org/foswiki/Documentation/U
singUSBBlasterUnderLinux
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Compile Code 
\end_layout

\begin_layout Standard
You could go to dupinSoC/fw/<project_folder>, and then use simple 
\series bold
make
\series default
 comand to compile and 
\series bold
make clean
\series default
 to clear compiled cache.
 In the other hand you could use the framework script .sh.
 In some cases script will be more comfortable.
 
\end_layout

\begin_layout Standard
\noindent
Note: Folder's names are in dupinSoC/fw/ 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename foldersreference.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Projects example in dupinSoC/fw/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Compile 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$./framework.sh -all <project_folder_name>
\end_layout

\begin_layout Plain Layout

For example 
\end_layout

\begin_layout Plain Layout

$./framework.sh -all ad9361_project
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Clean
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$./framework.sh -clean <project_folder_name>
\end_layout

\begin_layout Plain Layout

For example 
\end_layout

\begin_layout Plain Layout

$./framework.sh -clean ad9361_project
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Open ocd
\end_layout

\begin_layout Standard
Ocd is an interface to debug the board using gdb, check that the debug port
 is connected, and then open debug sesion.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=sh]
\end_layout

\begin_layout Plain Layout

$./framework.sh -ocd
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\noindent
Debug
\end_layout

\begin_layout Standard
\noindent
Once ocd is open , go to the debug tab in vscode, ensure you are on the
 FPGA_FW folder.
 Click on run -> add configuration.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Addcfg.png
	lyxscale 70
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Add config
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Vscode will open a .vscode/task.json file which will be configure as the image
 below.
 Check that the elf path and riscv-gdb match with yours.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename task json.png
	lyxscale 50
	scale 90

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
.vscode/task.json
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Go to the debug menu, and click the green triangle.
 Debug may start in a .S file, after some step over, it will go to the main.c
 file.
 A shortcut you can use, is to setup a breakpoint in the main, and just
 run the code until reach the breakpoint.
 
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename debug working.png
	lyxscale 50
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Debug working
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Firmware structure
\end_layout

\begin_layout Standard
This overview helps to visualize how to deploy firmware.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{forest}   
\end_layout

\begin_layout Plain Layout

for tree={     
\end_layout

\begin_layout Plain Layout

	font=
\backslash
ttfamily,     
\end_layout

\begin_layout Plain Layout

	grow'=0,
\end_layout

\begin_layout Plain Layout

	child anchor=west,
\end_layout

\begin_layout Plain Layout

	parent anchor=south,
\end_layout

\begin_layout Plain Layout

	anchor=west,
\end_layout

\begin_layout Plain Layout

	calign=first,
\end_layout

\begin_layout Plain Layout

	inner xsep=7pt,
\end_layout

\begin_layout Plain Layout

	edge path={
\end_layout

\begin_layout Plain Layout

	
\backslash
noexpand
\backslash
path [draw, 
\backslash
forestoption{edge}]
\end_layout

\begin_layout Plain Layout

	(!u.south west) +(7.5pt,0) |- (.child anchor) pic {folder} 
\backslash
forestoption{edge label};
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

file/.style={edge path={
\backslash
noexpand
\backslash
path [draw, 
\backslash
forestoption{edge}]           (!u.south west) +(7.5pt,0) |- (.child anchor)
 
\backslash
forestoption{edge label};},           inner xsep=2pt,font=
\backslash
small
\backslash
ttfamily},
\end_layout

\begin_layout Plain Layout

	before typesetting nodes={
\end_layout

\begin_layout Plain Layout

	      if n=1         
\end_layout

\begin_layout Plain Layout

		  {insert before={[,phantom]}}
\end_layout

\begin_layout Plain Layout

	      {}     
\end_layout

\begin_layout Plain Layout

		 },
\end_layout

\begin_layout Plain Layout

	     fit=band,     
\end_layout

\begin_layout Plain Layout

	    before computing xy={l=15pt},   
\end_layout

\begin_layout Plain Layout

	}   
\end_layout

\begin_layout Plain Layout

	[FPGA FW   
\end_layout

\begin_layout Plain Layout

	[config ]   
\end_layout

\begin_layout Plain Layout

	[dupinSoC [fw [ad9361 project [src[plataform generic[platform.c -> Hardware
 abstraction layer,file]][main.c,file]] [makefile,file]][bsp[libraries[driver
 -> softcore drivers [gpio,file][spi,file][riscv,file][uart,file]]]]] 
\end_layout

\begin_layout Plain Layout

	[hdl]] [openOCD] [SoftFiles] [framework.sh, file]] 
\end_layout

\begin_layout Plain Layout


\backslash
end{forest}
\end_layout

\end_inset


\end_layout

\begin_layout Section
GUI
\end_layout

\end_body
\end_document
